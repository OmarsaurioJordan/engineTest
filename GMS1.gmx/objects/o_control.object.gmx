<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// inicializacion
randomize();
s_ventana();
draw_set_valign(fa_top);
draw_set_halign(fa_left);
globalvar dlt;
dlt = 0;
reloj = 0; // ciclo para crear entidades
losfps = 0; // 3 variables para procesar los fps
sumfps = 0;
totfps = 0;
unidades = aumento * 4; // conteo de cantidad de unidades
tipo = o_torpe; // el objeto de las entidades actuales en uso
desiredfps = 30; // fps como referencia minima a alcanzar

// crear entidades iniciales
repeat unidades {
    instance_create(random(room_width), random(room_height), tipo);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// calculo del delta de tiempo global
dlt = min(0.1, delta_time * 0.000001);

// obtener los fps y crear unidades
reloj -= delta_time * 0.000001;
sumfps += fps;
totfps++;
if reloj &lt;= 0 {
    reloj += 1; // ciclo del reloj en segundos
    losfps = round(sumfps / totfps);
    sumfps = 0;
    totfps = 0;
    if losfps &gt;= desiredfps or keyboard_check(vk_space) {
        if losfps &gt; 35 {
            unidades += aumento * 4;
            repeat aumento * 4 {
                instance_create(random(room_width), random(room_height), tipo);
            }
        }
        else {
            unidades += aumento;
            repeat aumento {
                instance_create(random(room_width), random(room_height), tipo);
            }
        }
    }
    else if losfps &lt;= desiredfps - 5 {
        if losfps &lt; 5 {
            unidades -= aumento * 4;
            var aux;
            repeat aumento * 4 {
                aux = instance_find(tipo, 0);
                with aux {
                    instance_destroy();
                }
            }
        }
        else {
            unidades -= aumento;
            var aux;
            repeat aumento {
                aux = instance_find(tipo, 0);
                with aux {
                    instance_destroy();
                }
            }
        }
        unidades = max(0, unidades);
    }
}

// comandos
if keyboard_check_pressed(vk_anykey) {
    switch keyboard_key {
        case vk_escape:
            game_end();
            break;
        case vk_right:
            var nue;
            switch tipo {
                case o_torpe:
                    nue = o_humano;
                    break;
                case o_humano:
                    nue = o_monster;
                    break;
                case o_monster:
                    nue = o_vacio;
                    break;
                case o_vacio:
                    exit;
            }
            with tipo {
                instance_create(x, y, nue);
                instance_destroy();
            }
            tipo = nue;
            break;
        case vk_left:
            var nue;
            switch tipo {
                case o_torpe:
                    exit;
                case o_humano:
                    nue = o_torpe;
                    break;
                case o_monster:
                    nue = o_humano;
                    break;
                case o_vacio:
                    nue = o_monster;
                    break;
            }
            with tipo {
                instance_create(x, y, nue);
                instance_destroy();
            }
            tipo = nue;
            break;
        case vk_tab:
            if desiredfps == 30 {
                desiredfps = 15;
            }
            else {
                desiredfps = 30;
            }
            break;
        case vk_backspace:
            with tipo {
                instance_destroy();
            }
            unidades = aumento * 4;
            repeat unidades {
                instance_create(random(room_width), random(room_height), tipo);
            }
            break;
        case vk_enter:
            unidades += aumento * 4;
            repeat aumento * 4 {
                instance_create(random(room_width), random(room_height), tipo);
            }
            break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.5);
draw_rectangle_colour(0, 0, 350, 380,
    c_white, c_white, c_white, c_white, false);
draw_set_alpha(1);
draw_text_transformed_colour(0, 0,
    "FPS: " + string(losfps) + "#Units: " + string(unidades) +
    "#BackS:reset#Enter:create#Space:hold++#Right:tipo+#Left:tipo-" +
    "#Tab:ref(" + string(desiredfps) + ")",
    3, 3, 0, c_black, c_black, c_black, c_black, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
